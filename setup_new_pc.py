#!/usr/bin/env python3
"""
BugSeek - Automated Setup Script for New PC
This script automates the setup process for BugSeek on a new computer.
"""

import os
import sys
import subprocess
import platform
import shutil
from pathlib import Path

def print_step(step, message):
    """Print a formatted step message."""
    print(f"\n{'='*60}")
    print(f"STEP {step}: {message}")
    print(f"{'='*60}")

def print_success(message):
    """Print a success message."""
    print(f"‚úÖ {message}")

def print_error(message):
    """Print an error message."""
    print(f"‚ùå {message}")

def print_warning(message):
    """Print a warning message."""
    print(f"‚ö†Ô∏è  {message}")

def check_python_version():
    """Check if Python version is 3.8 or higher."""
    version = sys.version_info
    if version.major == 3 and version.minor >= 8:
        print_success(f"Python {version.major}.{version.minor}.{version.micro} detected")
        return True
    else:
        print_error(f"Python {version.major}.{version.minor}.{version.micro} detected. Python 3.8+ is required.")
        return False

def run_command(command, description, ignore_errors=False):
    """Run a command and handle errors."""
    print(f"Running: {description}")
    try:
        if platform.system() == "Windows":
            result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        else:
            result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        
        if result.stdout:
            print(result.stdout.strip())
        print_success(f"{description} completed successfully")
        return True
    except subprocess.CalledProcessError as e:
        if ignore_errors:
            print_warning(f"{description} failed (ignored): {e}")
            return False
        else:
            print_error(f"{description} failed: {e}")
            if e.stderr:
                print(f"Error details: {e.stderr}")
            return False

def create_env_file():
    """Create the .env file with correct configuration."""
    project_root = Path.cwd()
    instance_path = project_root / "instance" / "bugseek.db"
    
    env_content = f"""# BugSeek Environment Configuration
# Auto-generated by setup script

# Database Configuration (CRITICAL: Must be absolute path)
DATABASE_URL=sqlite:///{instance_path.as_posix()}

# Flask Configuration
SECRET_KEY=bugseek-secret-key-change-in-production
FLASK_DEBUG=True
FLASK_ENV=development

# API Configuration
API_VERSION=v1
CORS_ORIGINS=*
BACKEND_API_URL=http://localhost:5000

# OpenAI/Azure OpenAI Configuration (Optional)
OPENAI_API_KEY=your-openai-api-key-here
AZURE_OPENAI_ENDPOINT=https://mlop-azure-gateway.mediatek.inc
AZURE_OPENAI_API_VERSION=2024-10-21
AZURE_OPENAI_DEPLOYMENT_NAME=aida-gpt-4o-mini

# AI Analysis Configuration
AI_ANALYSIS_ENABLED=True
AI_MAX_RETRIES=3
AI_REQUEST_TIMEOUT=30
AI_BATCH_SIZE=10

# Redis Configuration (optional, for Celery task queue)
REDIS_URL=redis://localhost:6379/0
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# Streamlit Configuration
STREAMLIT_SERVER_PORT=8501

# File Upload Configuration
MAX_CONTENT_LENGTH=16777216  # 16MB max file size
UPLOAD_FOLDER=./uploads
"""
    
    env_file = Path(".env")
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print_success(f"Created .env file with database path: {instance_path}")
    return True

def main():
    """Main setup function."""
    print("üöÄ BugSeek - Automated Setup Script for New PC")
    print("This script will set up BugSeek with all dependencies and sample data.")
    
    # Step 1: Check Python version
    print_step(1, "Checking Python Version")
    if not check_python_version():
        print("\nPlease install Python 3.8 or higher from https://python.org/downloads")
        return False
    
    # Step 2: Check if we're in the right directory
    print_step(2, "Verifying Project Directory")
    if not Path("run.py").exists():
        print_error("run.py not found. Please run this script from the BugSeek project root directory.")
        return False
    print_success("Project directory verified")
    
    # Step 3: Create virtual environment
    print_step(3, "Creating Virtual Environment")
    if not Path("venv").exists():
        if not run_command("python -m venv venv", "Creating virtual environment"):
            return False
    else:
        print_warning("Virtual environment already exists")
    
    # Step 4: Install dependencies
    print_step(4, "Installing Dependencies")
    
    # Determine pip command based on OS
    if platform.system() == "Windows":
        pip_cmd = "venv\\Scripts\\python.exe -m pip"
    else:
        pip_cmd = "venv/bin/python -m pip"
    
    # Upgrade pip
    run_command(f"{pip_cmd} install --upgrade pip", "Upgrading pip", ignore_errors=True)
    
    # Install requirements
    if not run_command(f"{pip_cmd} install -r requirements.txt", "Installing requirements"):
        print_warning("requirements.txt installation failed, trying manual installation")
        packages = [
            "flask", "flask-restx", "flask-cors", "flask-sqlalchemy", 
            "sqlalchemy", "python-dotenv", "requests", "celery", 
            "redis", "streamlit", "pandas", "plotly", "pytest"
        ]
        for package in packages:
            run_command(f"{pip_cmd} install {package}", f"Installing {package}", ignore_errors=True)
    
    # Step 5: Create directories
    print_step(5, "Creating Required Directories")
    directories = ["instance", "uploads"]
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print_success(f"Created directory: {directory}")
    
    # Step 6: Create .env file
    print_step(6, "Creating Environment Configuration")
    create_env_file()
    
    # Step 7: Initialize database
    print_step(7, "Initializing Database")
    
    # Use the virtual environment python
    if platform.system() == "Windows":
        python_cmd = "venv\\Scripts\\python.exe"
    else:
        python_cmd = "venv/bin/python"
    
    if not run_command(f"{python_cmd} 1_initialize_database.py", "Initializing database schema"):
        return False
    
    # Step 8: Load sample data
    print_step(8, "Loading Sample Data")
    if not run_command(f"{python_cmd} 2_load_sample_data.py", "Loading 23 sample error logs"):
        return False
    
    # Step 9: Verify database
    print_step(9, "Verifying Database Setup")
    verify_cmd = f'{python_cmd} -c "from backend.models import db, ErrorLog; from backend.app import create_app; app=create_app(); app.app_context().push(); print(f\\"Records in database: {{ErrorLog.query.count()}}\\")"'
    run_command(verify_cmd, "Verifying database records", ignore_errors=True)
    
    # Step 10: Final instructions
    print_step(10, "Setup Complete!")
    print("""
üéâ BugSeek setup completed successfully!

üöÄ To start the application:
   python run.py

üì± Access points:
   ‚Ä¢ Frontend UI: http://localhost:8080
   ‚Ä¢ Backend API: http://localhost:5000  
   ‚Ä¢ API Documentation: http://localhost:5000/api/docs/

üß™ To test the setup:
   1. Start the application: python run.py
   2. Open http://localhost:8080/search
   3. Click "Search Logs" to see 23 sample error logs

üìã What was installed:
   ‚úÖ Virtual environment (venv/)
   ‚úÖ All Python dependencies
   ‚úÖ Database with 23 sample error logs
   ‚úÖ Environment configuration (.env)
   ‚úÖ Required directories (instance/, uploads/)

‚ö†Ô∏è  Optional next steps:
   ‚Ä¢ Add OpenAI API key to .env for AI features
   ‚Ä¢ Install Redis for background task processing
   ‚Ä¢ Configure production settings for deployment

üìö For detailed documentation, see:
   ‚Ä¢ NEW_PC_SETUP_GUIDE.md (comprehensive guide)
   ‚Ä¢ README.md (project overview)

üêõ Happy Bug Hunting with BugSeek!
    """)
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            sys.exit(0)
        else:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Setup failed with unexpected error: {e}")
        sys.exit(1)
